## How does a function address passed arguments?
## How does it address its contained block?

fn ->
	yield
	return stuff
	
reverse_rows ->
	validate not: $ and $$, message: 'cannot take both argument and block'
	for row in ($ or $$).rows 
		rev ::: row; rev
	return rev
	
### function creation context preservation: fat comma

a: 5
fn =>	// copies values of called local variables for reference within the function
	a
fn		// 5

## BUT...

a: 5
fn ->
	a
fn		// null

// referencing positional values from arguments

fn ->
	a: $[1], b: $[2]
it: a, that: b :: fn 'value'		// it='value', that=null

fn ->
	a, b :: $
	c: . + 2 :: $
fn 10, 20							// Table(Row(10,20), 12)